<?php
namespace CORE\MODELS;
use CORE\MVC\Model;
use CORE\MVC\IModel;
class Option extends Model implements IModel
{
    protected static $table="site_options";
    protected static $model = [
        'Id'=>['Key'=>true,'Type'=>'Int','Required'=>true, 'ColumnName'=>'id'],
        'Key'=>['Type'=>'String','Max'=>75,'Required'=>true,'ColumnName'=>'data_key'],
        'Value'=>['Type'=>'String','Required'=>true,'ColumnName'=>'data_value'],
        'Type'=>['Type'=>'String','Required'=>true,'ColumnName'=>'data_type'],
        'LastUpdated'=>['Type'=>'DateTime','Required'=>false, 'AutoGenerated'=>false,'ColumnName'=>'lastupdated']
    ];
    public static function createTable() : void
    {
        \CORE\DB\DB::query("CREATE TABLE `site_options` (
          `id` int(5) NOT NULL,
          `data_key` varchar(75) NOT NULL,
          `data_value` text NOT NULL,
          `data_type` varchar(75) NOT NULL,
          `lastupdated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
        ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
        ");
    }
    public static function remove(string $key) : void
    {
        Option::find()->where(['Key','=',$key])->delete()->run();
    }
    public static function set(string $key, string $value, string $type = 'string') : void
    {
        $option = Option::find()->where(['Key','=',$key])->single();
        if($option == null)
        {
            $option = Option::init();
            $option->setKey($key);
        }
        else if($option->getValue() == $value)
        {
            return;
        }
        $option->setValue(is_bool($value) ? ($value ? '1' : '0') : $value);
        $option->setLastUpdated(new \CORE\Date('Now'));
        $option->setType($type);
        $option->save();
    }
    public function getKeyValue()
    {
        return $this->getValue() != null ? self::normalizeValue($this->getType() , $this->getValue()) : null;
    }
    public function setValue($value)
    {
        if(is_bool($value))
        parent::setValue($value ? '1' : '0');
        else
        {
            parent::setValue($value);
        }
    }
    public static function get(string $key) : string
    {
        return Option::find()->where(['Key','=',$key])->single() ?? '';
    }
    private static function normalizeValue(string $type, string $value)
    {
        switch($type)
        {
            case 'string':
                $value = (string) $value;
                break;
            case 'int':
                $value = (int) $value;
                break;
            case 'float':
                $value = (float) $value;
                break;
            case 'number':
                $value = (float) $value;
                break;
            case 'bool':
                $value = $value == '1' ? true : false;
                break;
            default:
                throw new \InvalidArgumentException("Unexpected value of type paramter");
                break;
        }
        return $value;
    }

}
